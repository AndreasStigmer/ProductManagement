@page "/products"
@page "/products/{function}"
@using Helpers
@inject IProductRepository prodrepo
@inject IJSRuntime jsruntime

@attribute [Authorize(Roles = "Admin,Employee")]

<div class="row mt-4">

    <div class="col-md-9">
        <h3 class="text-info">Products</h3>
    </div>

    <div class="col-md-2">
        <NavLink href="/products/create" class="form-control btn btn-info">Create new product</NavLink>
    </div>


    <div class="col-md-12">

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Isactive</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var item in Products) {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Price</td>
                    <td>@item.isActive</td>
                    <td><NavLink href=" @("/products/edit/"+@item.Id)" class="btn btn-secondary">Edit</NavLink>
                    <button class="btn btn-danger" @onclick="()=>HandleDeleteClick(item.Id)">Delete</button>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    </div>


</div>

<DeleteConfirmation  OnConfirm="ConfirmDeleteRoom"></DeleteConfirmation>
@code {

    [Parameter]
    public string Function { get; set; } = "";

    public ICollection<ProductDTO> Products { get; set; } = new List<ProductDTO>();


    public int IdToDelete { get; set; } = 0;
    protected async override Task OnInitializedAsync()
    {
        if(Function=="Saved")
        {
            await jsruntime.SuccessToastr("Product Saved");
        }

        Products=await prodrepo.GetAllProducts();

    }

    protected async Task HandleDeleteClick(int productid)
    {
        IdToDelete = productid;
        await jsruntime.ShowDeleteConfirmation();
    }




    protected async Task ConfirmDeleteRoom(bool isCOnfirmed)
    {
        if(isCOnfirmed && IdToDelete!=0)
        {
            await prodrepo.DeleteProduct(IdToDelete);
            this.Products.Remove(this.Products.FirstOrDefault(p => p.Id == IdToDelete));
            IdToDelete = 0;
            await jsruntime.HideDeleteConfirmation();

        }
        else
        {
            IdToDelete = 0;
            await jsruntime.HideDeleteConfirmation();
        }
    }

}
