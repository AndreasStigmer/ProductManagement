@page "/products/create"
@page "/products/edit/{productid:int}"
@using Services
@using System.IO
@using Helpers
@inject IProductRepository prodrepo
@inject IJSRuntime jsruntime
@inject NavigationManager navman
@inject IFilemanager filemanager 
@inject IProductImageRepository imgrepo

<div class="row mt-4">
    <h3 class="text-info">@Title Product</h3>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="ProductModel" OnValidSubmit="OnSaveClick">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control" @bind-Value="ProductModel.Name"></InputText>
                        <ValidationMessage For="()=>ProductModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Price</label>
                        <InputNumber class="form-control" @bind-Value="ProductModel.Price"></InputNumber>
                    </div>

                    <div class="form-group">
                        <label>Is Active</label>
                        <InputCheckbox class="form-check" @bind-Value="ProductModel.isActive"></InputCheckbox>
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea class="form-control" @bind-Value="ProductModel.Details"></InputTextArea>
                    </div>

                    <div class="form-group">
                        <InputFile  OnChange="HandleFileUpload" multiple></InputFile>
                        <div class="row">
                            
                            @{ var index = 1;}
                            @foreach(var image in Urls) {
                            <div class="col-md-2 mt-3 ">
                                <div class="product-image-display" style="background:url('@image')">

                                    <span class="product-image-tag">@index</span>
                                </div>
                                
                                <button @onclick="()=>DeleteImage(image)" class="btn btn-block btn-outline-danger">Delete</button>
                            </div>
                               
                                index++;
                            }

                        </div>

                    </div>

                    <div class="form-group">
                        <button  class="btn btn-primary @(IsLoading? "disabled":"")">Save</button>
                        <NavLink href="/products" class="btn btn-secondary">Back to list</NavLink>

                    </div>

                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {


    public ProductDTO ProductModel { get; set; } = new ProductDTO();

    public string Title { get; set; } = "Create";

    [Parameter]
    public int ProductId { get; set; }

    public List<string> Urls { get; set; } = new List<string>();

    public bool IsLoading { get; set; } = true;


    private async Task HandleFileUpload(InputFileChangeEventArgs arg)
    {
        IsLoading = true;
        string[] extensions = new string[] { ".png", ".jpg", ".jpeg" };

        foreach(var item in arg.GetMultipleFiles())
        {
            FileInfo fi = new FileInfo(item.Name);

            if(extensions.Any(k=>k==fi.Extension.ToLower()))
            {
                var imgurl= await filemanager.SaveFile(item);
                if(imgurl!=null)
                {
                    Urls.Add(imgurl);
                }
            }else
            {
                //show error
            }

        }
        IsLoading = false;
        await jsruntime.SuccessToastr("Image was uploaded and saved");
    }

    protected async Task OnSaveClick()
    {
        IsLoading = true;
        if(ProductModel.Id!=0 && Title!="Create")
        {

            var obj=await prodrepo.UpdateProduct(ProductModel);
            await AddImageToProduct(obj);
            await jsruntime.SuccessToastr("Product was updated");
        }
        else
        {
            var obj=await prodrepo.CreateProduct(ProductModel);
            await AddImageToProduct(obj);

            if (obj == null)
            {
                await jsruntime.ErrorToastr("Object was not saved du to an error");
            }
            else
            {

                navman.NavigateTo("/products/Saved");
            }
        }
        IsLoading = false;
    }

    private async Task AddImageToProduct(ProductDTO dto)
    {

        foreach(var img in Urls)
        {
            if(!ProductModel.Images.Any(i=>i.Url==img))
            {
                var newdto = new ProductImageDTO() { ProductId = dto.Id, Url = img };
                await imgrepo.AddProductImage(newdto);
                ProductModel.Images.Add(newdto);
                await jsruntime.SuccessToastr("An image was added to the product");
            }else
            {

            }
        }


    }

    private async Task DeleteImage(string filename)
    {
        IsLoading = true;
        var newFilename = filename.Replace("/ProdImages/", "");
        filemanager.DeleteFile(newFilename);
        await jsruntime.SuccessToastr("File was removed from disk");
        Urls.Remove(filename);
        if (ProductModel.Images.Any(p => p.Url == filename)) {
            await imgrepo.RemoveImageByName(filename);
            await jsruntime.SuccessToastr("The image was removed from the product");
        }
        IsLoading = false;

    }


    protected async override Task OnInitializedAsync()
    {
        if(ProductId!=0)
        {
            Title = "Edit";
            ProductModel = await prodrepo.GetProduct(ProductId);
            Urls = ProductModel.Images.Select(i => i.Url).ToList();
        }
        IsLoading = false;


    }



}
